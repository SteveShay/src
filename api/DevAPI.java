package api;

import static Enumeration.Enumeration.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

/**
 * Lasted Updated: 11/21/19
 * FOR DEVELOPMENT USE AND FAILOVER ONLY
 * Returns manually calculated/estimated results to API requests to reduce API calls during development and provide error mitigation during deployment.
 * @author Stephen Hampson
 */
public class DevAPI {
    /**
     * Estimates the flight cost to a given destination based on values researched on 11/10/19.
     * Base values are the lowest flight price found and the range value is 2 times the difference between the average of 5+ values and the base.
     * Individual estimations are generated by multiplying the range value by a double between 1 and 0 and adding the result to the base cost.
     *
     * @param _originAirport The origin airports IATA airport code.
     * @param _destinationAirport The destination airports IATA airport code.
     * @param _departureDate The departure date.
     * @return Returns an average flight cost as a double.
     * @throws IOException
     */
    static double getExpectedFlightCost (String _originAirport, String _destinationAirport, String _departureDate) throws IOException{
        double averageby = 5.00;
        double total = 0;

        double[] flightRange = getRange(FLIGHT_RANGE_FILEPATH, _destinationAirport);
        double base = flightRange[0];
        double range = flightRange[1];

        for(int i = 0; i < averageby; i++){
            total += (base + (Math.random() * range));
        }

        return total / averageby;
    }

    /**
     * Estimates the Hotel in a given destination based on values researched on 11/10/19.
     * Base values are the lowest hotel price per night found and the range value is 2 times the difference between the average of 5+ values and the base.
     * Individual estimations are generated by multiplying the range value by a double between 1 and 0 and adding the result to the base cost.
     *
     * @param _citycode The IATA city code of the destination city.
     * @return Returns an average hotel cost per night as a double.
     * @throws IOException
     */
    static double getExpectedHotelCost(String _citycode) throws IOException{
        double averageby = 5.00;
        double total = 0;

        double[] hotelRange = getRange(HOTEL_RANGE_FILEPATH, _citycode);
        double base = hotelRange[0];
        double range = hotelRange[1];

        for(int i = 0; i < averageby; i++){
            total += (base + (Math.random() * range));
        }

        return total / averageby;
    }

    /**
     * Takes the users location as a paired latitude and longitude and returns the default major airport.
     *
     * @param _latitude The users local latitude.
     * @param _longitude The users local longitude
     * @return The default IATA airport code.
     */
    static String getAirportCode (double _latitude, double _longitude){
        return "GSO";
    }

    /**
     * Private method reads the developer hotel and flight pricing files to find the preset base price and range values.
     *
     * @param _filepath The filepath of the file to be read. Allows the same method to be used for hotel and flight pricing.
     * @param _code The IATA city or airport code to be searched for depending on calling method.
     * @return returns the base and range values as a double array, base price first, and range second.
     * @throws FileNotFoundException
     * @throws IOException
     */
    private static double[] getRange(String _filepath, String _code) throws FileNotFoundException, IOException{
        String[] input = null;
        double[] result = new double[2];

        File inputFile = new File(_filepath);
        BufferedReader br = new BufferedReader(new FileReader(inputFile));

        String str;
        while ((str = br.readLine()) != null){
            input = str.split("\t");
            if (_code.equals(input[0])){
                String base = input[1];
                String range = input[2];

                result[0] = Double.parseDouble(base);
                result[1] = Double.parseDouble(range);
            }
        }
        return result;
    }
}
